AWSTemplateFormatVersion: 2010-09-09

Description: Create the following 4 EC2 instances, 2 security groups for ELB and EC2.

Parameters:
  KeyName:
    Description: EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano]
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: Range of IP addresses that we can use to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Type:  String
    Default: ami-09d56f8956ab235b3

#  SubNetId1:
#    Description: First SubNet id 1
#    Type: String
#
#  SubNetId2:
#    Description: Second SubNet id 2
#    Type: String
#
#  SubNetId3:
#    Description: SubNet id 3
#    Type: String
#
#  SubNetId4:
#    Description: SubNet id 4
#    Type: String

  VPCId:
    Description: vpc id
    Type: String

  VPCcidr:
    Description: vpc cidr
    Type: String

Resources:

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 and http access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref 'VPCcidr'
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref 'SSHLocation'

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          # Sleep for the instance role might not be properly attached
          sleep 10
          sudo apt-get update
          sudo apt-get install python3-pip -y
          sudo apt-get install python3-flask -y
          sudo apt install python3-rq -y
          sudo apt install redis-server -y
          pip3 install boto3
          cd /home/ubuntu
          git clone https://github.com/sonegoh/cloud_computing.git
          cd cloud_computing/hw2 && python3 main.py

#  EC2Instance2:
#    Type: AWS::EC2::Instance
#    Properties:
#      InstanceType: !Ref InstanceType
#      SecurityGroupIds:
#        - !Ref InstanceSecurityGroup
#      KeyName: !Ref KeyName
#      ImageId: !Ref LatestAmiId
#      IamInstanceProfile:  !Ref MyInstanceProfile
#      UserData:
#        Fn::Base64:
#          !Sub |
#          #!/bin/bash
#          # Sleep for the instance role might not be properly attached
#          sleep 10
#          sudo apt-get update
#          sudo apt-get install python3-pip -y
#          sudo apt-get install python3-flask -y
#          pip3 install xxhash
#          pip3 install boto3
#          cd /home/ubuntu
#          git clone https://github.com/edenbartov/cloud-computing.git
#          cd cloud-computing && python3 app.py
#    DependsOn:
#      - TableRole

Outputs:
  InstanceId1:
    Description: InstanceId of EC2Instance1
    Value: !Ref 'EC2Instance1'
  Instance1IP:
    Description: IP address of EC2Instance1
    Value: !GetAtt [EC2Instance1, PublicIp]
#  InstanceId2:
#    Description: InstanceId of EC2Instance2
#    Value: !Ref 'EC2Instance2'
#  Instance2IP:
#    Description: IP address of EC2Instance2
#    Value: !GetAtt [EC2Instance2, PublicIp]
